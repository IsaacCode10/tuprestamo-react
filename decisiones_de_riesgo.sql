-- 1. Crear un tipo ENUM para las decisiones posibles
CREATE TYPE decision_status AS ENUM ('Aprobado', 'Rechazado');

-- 2. Crear la tabla de decisiones_de_riesgo
CREATE TABLE public.decisiones_de_riesgo (
    id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY,
    created_at timestamp with time zone NOT NULL DEFAULT now(),
    perfil_de_riesgo_id bigint NOT NULL,
    analista_id uuid NOT NULL DEFAULT auth.uid(),
    decision decision_status NOT NULL,
    motivo text,
    notas text,
    CONSTRAINT decisiones_de_riesgo_pkey PRIMARY KEY (id),
    CONSTRAINT decisiones_de_riesgo_perfil_de_riesgo_id_fkey FOREIGN KEY (perfil_de_riesgo_id) REFERENCES perfiles_de_riesgo(id),
    CONSTRAINT decisiones_de_riesgo_analista_id_fkey FOREIGN KEY (analista_id) REFERENCES auth.users(id)
);

-- 3. Habilitar RLS para la nueva tabla
ALTER TABLE public.decisiones_de_riesgo ENABLE ROW LEVEL SECURITY;

-- 4. Crear pol√≠ticas de seguridad
-- Los analistas pueden crear decisiones
CREATE POLICY "Permitir a analistas crear decisiones"
ON public.decisiones_de_riesgo
FOR INSERT
TO analista_riesgo
WITH CHECK (true);

-- Los analistas pueden ver las decisiones que ellos mismos crearon
CREATE POLICY "Permitir a analistas ver sus propias decisiones"
ON public.decisiones_de_riesgo
FOR SELECT
TO analista_riesgo
USING (auth.uid() = analista_id);

-- El super-admin puede hacer todo
CREATE POLICY "Permitir acceso total a super_admin"
ON public.decisiones_de_riesgo
FOR ALL
TO super_admin
USING (true)
WITH CHECK (true);
